"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
const architect_1 = require("@angular-devkit/architect");
const node_1 = require("@angular-devkit/core/node");
const core_1 = require("@angular-devkit/core");
const path_1 = require("path");
const fs_1 = require("fs");
const deploy_1 = require("./actions/deploy");
exports.default = architect_1.createBuilder((builderConfig, context) => __awaiter(this, void 0, void 0, function* () {
    const root = core_1.normalize(context.workspaceRoot);
    const workspace = new core_1.experimental.workspace.Workspace(root, new node_1.NodeJsSyncHost());
    yield workspace.loadWorkspaceFromHost(core_1.normalize('angular.json')).toPromise();
    if (!context.target) {
        throw new Error('Cannot deploy the application without a target');
    }
    const project = workspace.getProject(context.target.project);
    const workspaceRoot = core_1.getSystemPath(workspace.root);
    const azureProject = getAzureHostingConfig(workspaceRoot, context.target.project, builderConfig.config);
    try {
        yield deploy_1.default(context, path_1.join(workspaceRoot, project.root), azureProject);
    }
    catch (e) {
        context.logger.error('Error when trying to deploy: ');
        context.logger.error(e.message);
        return { success: false };
    }
    return { success: true };
}));
function getAzureHostingConfig(projectRoot, target, azureConfigFile) {
    const azureJson = JSON.parse(fs_1.readFileSync(path_1.join(projectRoot, azureConfigFile), 'UTF-8'));
    const projects = azureJson.hosting;
    return projects.find(project => project.app.project === target);
}
exports.getAzureHostingConfig = getAzureHostingConfig;
//# sourceMappingURL=deploy.builder.js.map